#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function
import utool as ut
import os
from os.path import dirname  # NOQA
from utool._internal import util_importer


def makeinit(module_path, exclude_modnames=[], use_star=False):
    #module_name = basename(module_path)
    module_name = ut.get_modname_from_modpath(module_path)
    IMPORT_TUPLES = util_importer.make_import_tuples(module_path, exclude_modnames=exclude_modnames)
    initstr = util_importer.make_initstr(module_name, IMPORT_TUPLES)
    regen_command = 'cd %s\n' % (module_path)
    regen_command += '    makeinit.py'
    if use_star:
        regen_command += ' --star'
    if len(exclude_modnames ) > 0:
        regen_command += ' -x ' + ' '.join(exclude_modnames)

    regen_block = (ut.codeblock('''
    """
    Regen Command:
        {regen_command}
    """
    ''').format(regen_command=regen_command))

    importstar_codeblock = ut.codeblock(
        '''
        """
        python -c "import {module_name}" --dump-{module_name}-init
        python -c "import {module_name}" --update-{module_name}-init
        """
        __DYNAMIC__ = True
        if __DYNAMIC__:
            # TODO: import all utool external prereqs. Then the imports will not import
            # anything that has already in a toplevel namespace
            # COMMENTED OUT FOR FROZEN __INIT__
            # Dynamically import listed util libraries and their members.
            from utool._internal import util_importer
            # FIXME: this might actually work with rrrr, but things arent being
            # reimported because they are already in the modules list
            import_execstr = util_importer.dynamic_import(__name__, IMPORT_TUPLES)
            exec(import_execstr)
            DOELSE = False
        else:
            # Do the nonexec import (can force it to happen no matter what if alwyas set
            # to True)
            DOELSE = True

        if DOELSE:
            # <AUTOGEN_INIT>
            pass
            # </AUTOGEN_INIT>
        '''.format(module_name=module_name)
    )

    init_codeblock_list = ['# -*- coding: utf-8 -*-', '### __init__.py ###']
    init_codeblock_list.append(initstr)
    init_codeblock_list.append('\nIMPORT_TUPLES = ' + ut.list_str(IMPORT_TUPLES))
    if use_star:
        init_codeblock_list.append(importstar_codeblock)
    init_codeblock_list.append(regen_block)

    init_codeblock = '\n'.join(init_codeblock_list)
    return init_codeblock


if __name__ == '__main__':
    exclude_modnames = ut.get_argval(('--exclude', '-x'), list, default=[])
    modname = ut.get_argval('--modname', str, default=None)
    if modname is None:
        dpath = os.getcwd()
    else:
        dpath = ut.get_modpath_from_modname(modname)
    module_path = ut.unixpath(dpath)
    use_star = ut.get_argflag('--star')
    init_codeblock = makeinit(module_path, exclude_modnames=exclude_modnames, use_star=use_star)
    do_write = ut.get_argflag('-w')
    if do_write:
        init_fpath = ut.unixjoin(module_path, '__init__.py')
        print(init_fpath)
        ut.write_to(init_fpath, init_codeblock)
    print(init_codeblock)
    print('# autogenerated __init__.py for: %r' % module_path)
